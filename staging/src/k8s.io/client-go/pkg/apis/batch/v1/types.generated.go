/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/client-go/pkg/api/resource"
	pkg3_v1 "k8s.io/client-go/pkg/api/v1"
	pkg1_v1 "k8s.io/client-go/pkg/apis/meta/v1"
	pkg2_types "k8s.io/client-go/pkg/types"
	pkg5_intstr "k8s.io/client-go/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg3_v1.PodTemplateSpec
		var v2 pkg1_v1.TypeMeta
		var v3 pkg2_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			yyq2[3] = true
			yyq2[4] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else if z.HasExtensions() && z.EncExt(yy10) {
					} else {
						z.EncFallback(yy10)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy12 := &x.ObjectMeta
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else if z.HasExtensions() && z.EncExt(yy12) {
					} else {
						z.EncFallback(yy12)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yy15 := &x.Spec
					yy15.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy16 := &x.Spec
					yy16.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yy18 := &x.Status
					yy18.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy19 := &x.Status
					yy19.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_v1.ObjectMeta{}
			} else {
				yyv25 := &x.ObjectMeta
				yym26 := z.DecBinary()
				_ = yym26
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv25) {
				} else {
					z.DecFallback(yyv25, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv27 := &x.Spec
				yyv27.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv28 := &x.Status
				yyv28.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj29 int
	var yyb29 bool
	var yyhl29 bool = l >= 0
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_v1.ObjectMeta{}
	} else {
		yyv32 := &x.ObjectMeta
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv32) {
		} else {
			z.DecFallback(yyv32, false)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv34 := &x.Spec
		yyv34.CodecDecodeSelf(d)
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv35 := &x.Status
		yyv35.CodecDecodeSelf(d)
	}
	for {
		yyj29++
		if yyhl29 {
			yyb29 = yyj29 > l
		} else {
			yyb29 = r.CheckBreak()
		}
		if yyb29 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj29-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym36 := z.EncBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep37 := !z.EncBinary()
			yy2arr37 := z.EncBasicHandle().StructToArray
			var yyq37 [4]bool
			_, _, _ = yysep37, yyq37, yy2arr37
			const yyr37 bool = false
			yyq37[0] = x.Kind != ""
			yyq37[1] = x.APIVersion != ""
			yyq37[2] = true
			var yynn37 int
			if yyr37 || yy2arr37 {
				r.EncodeArrayStart(4)
			} else {
				yynn37 = 1
				for _, b := range yyq37 {
					if b {
						yynn37++
					}
				}
				r.EncodeMapStart(yynn37)
				yynn37 = 0
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[0] {
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq37[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[1] {
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq37[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym43 := z.EncBinary()
					_ = yym43
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[2] {
					yy45 := &x.ListMeta
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else if z.HasExtensions() && z.EncExt(yy45) {
					} else {
						z.EncFallback(yy45)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq37[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy47 := &x.ListMeta
					yym48 := z.EncBinary()
					_ = yym48
					if false {
					} else if z.HasExtensions() && z.EncExt(yy47) {
					} else {
						z.EncFallback(yy47)
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_v1.ListMeta{}
			} else {
				yyv57 := &x.ListMeta
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv57) {
				} else {
					z.DecFallback(yyv57, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv59 := &x.Items
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv59), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj61 int
	var yyb61 bool
	var yyhl61 bool = l >= 0
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_v1.ListMeta{}
	} else {
		yyv64 := &x.ListMeta
		yym65 := z.DecBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv64) {
		} else {
			z.DecFallback(yyv64, false)
		}
	}
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv66 := &x.Items
		yym67 := z.DecBinary()
		_ = yym67
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv66), d)
		}
	}
	for {
		yyj61++
		if yyhl61 {
			yyb61 = yyj61 > l
		} else {
			yyb61 = r.CheckBreak()
		}
		if yyb61 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj61-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym68 := z.EncBinary()
		_ = yym68
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep69 := !z.EncBinary()
			yy2arr69 := z.EncBasicHandle().StructToArray
			var yyq69 [6]bool
			_, _, _ = yysep69, yyq69, yy2arr69
			const yyr69 bool = false
			yyq69[0] = x.Parallelism != nil
			yyq69[1] = x.Completions != nil
			yyq69[2] = x.ActiveDeadlineSeconds != nil
			yyq69[3] = x.Selector != nil
			yyq69[4] = x.ManualSelector != nil
			var yynn69 int
			if yyr69 || yy2arr69 {
				r.EncodeArrayStart(6)
			} else {
				yynn69 = 1
				for _, b := range yyq69 {
					if b {
						yynn69++
					}
				}
				r.EncodeMapStart(yynn69)
				yynn69 = 0
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy71 := *x.Parallelism
						yym72 := z.EncBinary()
						_ = yym72
						if false {
						} else {
							r.EncodeInt(int64(yy71))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy73 := *x.Parallelism
						yym74 := z.EncBinary()
						_ = yym74
						if false {
						} else {
							r.EncodeInt(int64(yy73))
						}
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy76 := *x.Completions
						yym77 := z.EncBinary()
						_ = yym77
						if false {
						} else {
							r.EncodeInt(int64(yy76))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy78 := *x.Completions
						yym79 := z.EncBinary()
						_ = yym79
						if false {
						} else {
							r.EncodeInt(int64(yy78))
						}
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy81 := *x.ActiveDeadlineSeconds
						yym82 := z.EncBinary()
						_ = yym82
						if false {
						} else {
							r.EncodeInt(int64(yy81))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy83 := *x.ActiveDeadlineSeconds
						yym84 := z.EncBinary()
						_ = yym84
						if false {
						} else {
							r.EncodeInt(int64(yy83))
						}
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym86 := z.EncBinary()
						_ = yym86
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym87 := z.EncBinary()
						_ = yym87
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[4] {
					if x.ManualSelector == nil {
						r.EncodeNil()
					} else {
						yy89 := *x.ManualSelector
						yym90 := z.EncBinary()
						_ = yym90
						if false {
						} else {
							r.EncodeBool(bool(yy89))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("manualSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ManualSelector == nil {
						r.EncodeNil()
					} else {
						yy91 := *x.ManualSelector
						yym92 := z.EncBinary()
						_ = yym92
						if false {
						} else {
							r.EncodeBool(bool(yy91))
						}
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy94 := &x.Template
				yy94.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy95 := &x.Template
				yy95.CodecEncodeSelf(e)
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym96 := z.DecBinary()
	_ = yym96
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct97 := r.ContainerType()
		if yyct97 == codecSelferValueTypeMap1234 {
			yyl97 := r.ReadMapStart()
			if yyl97 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl97, d)
			}
		} else if yyct97 == codecSelferValueTypeArray1234 {
			yyl97 := r.ReadArrayStart()
			if yyl97 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl97, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys98Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys98Slc
	var yyhl98 bool = l >= 0
	for yyj98 := 0; ; yyj98++ {
		if yyhl98 {
			if yyj98 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys98Slc = r.DecodeBytes(yys98Slc, true, true)
		yys98 := string(yys98Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys98 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int32)
				}
				yym100 := z.DecBinary()
				_ = yym100
				if false {
				} else {
					*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int32)
				}
				yym102 := z.DecBinary()
				_ = yym102
				if false {
				} else {
					*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym104 := z.DecBinary()
				_ = yym104
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_v1.LabelSelector)
				}
				yym106 := z.DecBinary()
				_ = yym106
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "manualSelector":
			if r.TryDecodeAsNil() {
				if x.ManualSelector != nil {
					x.ManualSelector = nil
				}
			} else {
				if x.ManualSelector == nil {
					x.ManualSelector = new(bool)
				}
				yym108 := z.DecBinary()
				_ = yym108
				if false {
				} else {
					*((*bool)(x.ManualSelector)) = r.DecodeBool()
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg3_v1.PodTemplateSpec{}
			} else {
				yyv109 := &x.Template
				yyv109.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys98)
		} // end switch yys98
	} // end for yyj98
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj110 int
	var yyb110 bool
	var yyhl110 bool = l >= 0
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int32)
		}
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int32)
		}
		yym114 := z.DecBinary()
		_ = yym114
		if false {
		} else {
			*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym116 := z.DecBinary()
		_ = yym116
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_v1.LabelSelector)
		}
		yym118 := z.DecBinary()
		_ = yym118
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ManualSelector != nil {
			x.ManualSelector = nil
		}
	} else {
		if x.ManualSelector == nil {
			x.ManualSelector = new(bool)
		}
		yym120 := z.DecBinary()
		_ = yym120
		if false {
		} else {
			*((*bool)(x.ManualSelector)) = r.DecodeBool()
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg3_v1.PodTemplateSpec{}
	} else {
		yyv121 := &x.Template
		yyv121.CodecDecodeSelf(d)
	}
	for {
		yyj110++
		if yyhl110 {
			yyb110 = yyj110 > l
		} else {
			yyb110 = r.CheckBreak()
		}
		if yyb110 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj110-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym122 := z.EncBinary()
		_ = yym122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep123 := !z.EncBinary()
			yy2arr123 := z.EncBasicHandle().StructToArray
			var yyq123 [6]bool
			_, _, _ = yysep123, yyq123, yy2arr123
			const yyr123 bool = false
			yyq123[0] = len(x.Conditions) != 0
			yyq123[1] = x.StartTime != nil
			yyq123[2] = x.CompletionTime != nil
			yyq123[3] = x.Active != 0
			yyq123[4] = x.Succeeded != 0
			yyq123[5] = x.Failed != 0
			var yynn123 int
			if yyr123 || yy2arr123 {
				r.EncodeArrayStart(6)
			} else {
				yynn123 = 0
				for _, b := range yyq123 {
					if b {
						yynn123++
					}
				}
				r.EncodeMapStart(yynn123)
				yynn123 = 0
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym125 := z.EncBinary()
						_ = yym125
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym126 := z.EncBinary()
						_ = yym126
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym128 := z.EncBinary()
						_ = yym128
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym128 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym128 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym129 := z.EncBinary()
						_ = yym129
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym129 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym129 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym131 := z.EncBinary()
						_ = yym131
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym131 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym131 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym132 := z.EncBinary()
						_ = yym132
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym132 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym132 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[3] {
					yym134 := z.EncBinary()
					_ = yym134
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq123[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym135 := z.EncBinary()
					_ = yym135
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[4] {
					yym137 := z.EncBinary()
					_ = yym137
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq123[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym138 := z.EncBinary()
					_ = yym138
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[5] {
					yym140 := z.EncBinary()
					_ = yym140
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq123[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym141 := z.EncBinary()
					_ = yym141
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym142 := z.DecBinary()
	_ = yym142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct143 := r.ContainerType()
		if yyct143 == codecSelferValueTypeMap1234 {
			yyl143 := r.ReadMapStart()
			if yyl143 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl143, d)
			}
		} else if yyct143 == codecSelferValueTypeArray1234 {
			yyl143 := r.ReadArrayStart()
			if yyl143 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl143, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys144Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys144Slc
	var yyhl144 bool = l >= 0
	for yyj144 := 0; ; yyj144++ {
		if yyhl144 {
			if yyj144 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys144Slc = r.DecodeBytes(yys144Slc, true, true)
		yys144 := string(yys144Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys144 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv145 := &x.Conditions
				yym146 := z.DecBinary()
				_ = yym146
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv145), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_v1.Time)
				}
				yym148 := z.DecBinary()
				_ = yym148
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym148 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym148 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_v1.Time)
				}
				yym150 := z.DecBinary()
				_ = yym150
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym150 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym150 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int32(r.DecodeInt(32))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int32(r.DecodeInt(32))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys144)
		} // end switch yys144
	} // end for yyj144
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj154 int
	var yyb154 bool
	var yyhl154 bool = l >= 0
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv155 := &x.Conditions
		yym156 := z.DecBinary()
		_ = yym156
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv155), d)
		}
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_v1.Time)
		}
		yym158 := z.DecBinary()
		_ = yym158
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym158 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym158 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_v1.Time)
		}
		yym160 := z.DecBinary()
		_ = yym160
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym160 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym160 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int32(r.DecodeInt(32))
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int32(r.DecodeInt(32))
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int32(r.DecodeInt(32))
	}
	for {
		yyj154++
		if yyhl154 {
			yyb154 = yyj154 > l
		} else {
			yyb154 = r.CheckBreak()
		}
		if yyb154 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj154-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym164 := z.EncBinary()
	_ = yym164
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym165 := z.DecBinary()
	_ = yym165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym166 := z.EncBinary()
		_ = yym166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep167 := !z.EncBinary()
			yy2arr167 := z.EncBasicHandle().StructToArray
			var yyq167 [6]bool
			_, _, _ = yysep167, yyq167, yy2arr167
			const yyr167 bool = false
			yyq167[2] = true
			yyq167[3] = true
			yyq167[4] = x.Reason != ""
			yyq167[5] = x.Message != ""
			var yynn167 int
			if yyr167 || yy2arr167 {
				r.EncodeArrayStart(6)
			} else {
				yynn167 = 2
				for _, b := range yyq167 {
					if b {
						yynn167++
					}
				}
				r.EncodeMapStart(yynn167)
				yynn167 = 0
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym170 := z.EncBinary()
				_ = yym170
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym171 := z.EncBinary()
				_ = yym171
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[2] {
					yy173 := &x.LastProbeTime
					yym174 := z.EncBinary()
					_ = yym174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy173) {
					} else if yym174 {
						z.EncBinaryMarshal(yy173)
					} else if !yym174 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy173)
					} else {
						z.EncFallback(yy173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy175 := &x.LastProbeTime
					yym176 := z.EncBinary()
					_ = yym176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy175) {
					} else if yym176 {
						z.EncBinaryMarshal(yy175)
					} else if !yym176 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy175)
					} else {
						z.EncFallback(yy175)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[3] {
					yy178 := &x.LastTransitionTime
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else if z.HasExtensions() && z.EncExt(yy178) {
					} else if yym179 {
						z.EncBinaryMarshal(yy178)
					} else if !yym179 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy178)
					} else {
						z.EncFallback(yy178)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy180 := &x.LastTransitionTime
					yym181 := z.EncBinary()
					_ = yym181
					if false {
					} else if z.HasExtensions() && z.EncExt(yy180) {
					} else if yym181 {
						z.EncBinaryMarshal(yy180)
					} else if !yym181 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy180)
					} else {
						z.EncFallback(yy180)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[4] {
					yym183 := z.EncBinary()
					_ = yym183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq167[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym184 := z.EncBinary()
					_ = yym184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[5] {
					yym186 := z.EncBinary()
					_ = yym186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq167[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym187 := z.EncBinary()
					_ = yym187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym188 := z.DecBinary()
	_ = yym188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct189 := r.ContainerType()
		if yyct189 == codecSelferValueTypeMap1234 {
			yyl189 := r.ReadMapStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl189, d)
			}
		} else if yyct189 == codecSelferValueTypeArray1234 {
			yyl189 := r.ReadArrayStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys190Slc
	var yyhl190 bool = l >= 0
	for yyj190 := 0; ; yyj190++ {
		if yyhl190 {
			if yyj190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys190Slc = r.DecodeBytes(yys190Slc, true, true)
		yys190 := string(yys190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys190 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg3_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_v1.Time{}
			} else {
				yyv193 := &x.LastProbeTime
				yym194 := z.DecBinary()
				_ = yym194
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv193) {
				} else if yym194 {
					z.DecBinaryUnmarshal(yyv193)
				} else if !yym194 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv193)
				} else {
					z.DecFallback(yyv193, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_v1.Time{}
			} else {
				yyv195 := &x.LastTransitionTime
				yym196 := z.DecBinary()
				_ = yym196
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv195) {
				} else if yym196 {
					z.DecBinaryUnmarshal(yyv195)
				} else if !yym196 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv195)
				} else {
					z.DecFallback(yyv195, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys190)
		} // end switch yys190
	} // end for yyj190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj199 int
	var yyb199 bool
	var yyhl199 bool = l >= 0
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg3_v1.ConditionStatus(r.DecodeString())
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_v1.Time{}
	} else {
		yyv202 := &x.LastProbeTime
		yym203 := z.DecBinary()
		_ = yym203
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv202) {
		} else if yym203 {
			z.DecBinaryUnmarshal(yyv202)
		} else if !yym203 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv202)
		} else {
			z.DecFallback(yyv202, false)
		}
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_v1.Time{}
	} else {
		yyv204 := &x.LastTransitionTime
		yym205 := z.DecBinary()
		_ = yym205
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv204) {
		} else if yym205 {
			z.DecBinaryUnmarshal(yyv204)
		} else if !yym205 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv204)
		} else {
			z.DecFallback(yyv204, false)
		}
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj199++
		if yyhl199 {
			yyb199 = yyj199 > l
		} else {
			yyb199 = r.CheckBreak()
		}
		if yyb199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv208 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy209 := &yyv208
		yy209.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv210 := *v
	yyh210, yyl210 := z.DecSliceHelperStart()
	var yyc210 bool
	if yyl210 == 0 {
		if yyv210 == nil {
			yyv210 = []Job{}
			yyc210 = true
		} else if len(yyv210) != 0 {
			yyv210 = yyv210[:0]
			yyc210 = true
		}
	} else if yyl210 > 0 {
		var yyrr210, yyrl210 int
		var yyrt210 bool
		if yyl210 > cap(yyv210) {

			yyrg210 := len(yyv210) > 0
			yyv2210 := yyv210
			yyrl210, yyrt210 = z.DecInferLen(yyl210, z.DecBasicHandle().MaxInitLen, 832)
			if yyrt210 {
				if yyrl210 <= cap(yyv210) {
					yyv210 = yyv210[:yyrl210]
				} else {
					yyv210 = make([]Job, yyrl210)
				}
			} else {
				yyv210 = make([]Job, yyrl210)
			}
			yyc210 = true
			yyrr210 = len(yyv210)
			if yyrg210 {
				copy(yyv210, yyv2210)
			}
		} else if yyl210 != len(yyv210) {
			yyv210 = yyv210[:yyl210]
			yyc210 = true
		}
		yyj210 := 0
		for ; yyj210 < yyrr210; yyj210++ {
			yyh210.ElemContainerState(yyj210)
			if r.TryDecodeAsNil() {
				yyv210[yyj210] = Job{}
			} else {
				yyv211 := &yyv210[yyj210]
				yyv211.CodecDecodeSelf(d)
			}

		}
		if yyrt210 {
			for ; yyj210 < yyl210; yyj210++ {
				yyv210 = append(yyv210, Job{})
				yyh210.ElemContainerState(yyj210)
				if r.TryDecodeAsNil() {
					yyv210[yyj210] = Job{}
				} else {
					yyv212 := &yyv210[yyj210]
					yyv212.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj210 := 0
		for ; !r.CheckBreak(); yyj210++ {

			if yyj210 >= len(yyv210) {
				yyv210 = append(yyv210, Job{}) // var yyz210 Job
				yyc210 = true
			}
			yyh210.ElemContainerState(yyj210)
			if yyj210 < len(yyv210) {
				if r.TryDecodeAsNil() {
					yyv210[yyj210] = Job{}
				} else {
					yyv213 := &yyv210[yyj210]
					yyv213.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj210 < len(yyv210) {
			yyv210 = yyv210[:yyj210]
			yyc210 = true
		} else if yyj210 == 0 && yyv210 == nil {
			yyv210 = []Job{}
			yyc210 = true
		}
	}
	yyh210.End()
	if yyc210 {
		*v = yyv210
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv214 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy215 := &yyv214
		yy215.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv216 := *v
	yyh216, yyl216 := z.DecSliceHelperStart()
	var yyc216 bool
	if yyl216 == 0 {
		if yyv216 == nil {
			yyv216 = []JobCondition{}
			yyc216 = true
		} else if len(yyv216) != 0 {
			yyv216 = yyv216[:0]
			yyc216 = true
		}
	} else if yyl216 > 0 {
		var yyrr216, yyrl216 int
		var yyrt216 bool
		if yyl216 > cap(yyv216) {

			yyrg216 := len(yyv216) > 0
			yyv2216 := yyv216
			yyrl216, yyrt216 = z.DecInferLen(yyl216, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt216 {
				if yyrl216 <= cap(yyv216) {
					yyv216 = yyv216[:yyrl216]
				} else {
					yyv216 = make([]JobCondition, yyrl216)
				}
			} else {
				yyv216 = make([]JobCondition, yyrl216)
			}
			yyc216 = true
			yyrr216 = len(yyv216)
			if yyrg216 {
				copy(yyv216, yyv2216)
			}
		} else if yyl216 != len(yyv216) {
			yyv216 = yyv216[:yyl216]
			yyc216 = true
		}
		yyj216 := 0
		for ; yyj216 < yyrr216; yyj216++ {
			yyh216.ElemContainerState(yyj216)
			if r.TryDecodeAsNil() {
				yyv216[yyj216] = JobCondition{}
			} else {
				yyv217 := &yyv216[yyj216]
				yyv217.CodecDecodeSelf(d)
			}

		}
		if yyrt216 {
			for ; yyj216 < yyl216; yyj216++ {
				yyv216 = append(yyv216, JobCondition{})
				yyh216.ElemContainerState(yyj216)
				if r.TryDecodeAsNil() {
					yyv216[yyj216] = JobCondition{}
				} else {
					yyv218 := &yyv216[yyj216]
					yyv218.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj216 := 0
		for ; !r.CheckBreak(); yyj216++ {

			if yyj216 >= len(yyv216) {
				yyv216 = append(yyv216, JobCondition{}) // var yyz216 JobCondition
				yyc216 = true
			}
			yyh216.ElemContainerState(yyj216)
			if yyj216 < len(yyv216) {
				if r.TryDecodeAsNil() {
					yyv216[yyj216] = JobCondition{}
				} else {
					yyv219 := &yyv216[yyj216]
					yyv219.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj216 < len(yyv216) {
			yyv216 = yyv216[:yyj216]
			yyc216 = true
		} else if yyj216 == 0 && yyv216 == nil {
			yyv216 = []JobCondition{}
			yyc216 = true
		}
	}
	yyh216.End()
	if yyc216 {
		*v = yyv216
	}
}
