/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1_fakelister

import (
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/client-go/listers/core/v1"
	cache "k8s.io/client-go/tools/cache"
)

// NodeLister helps list Nodes.
// All objects returned here must be treated as read-only.
type FakeNodeLister interface {
	v1.NodeLister
	// Add adds the given object to the lister
	Add(obj ...*corev1.Node) error
	// Update updates the given object in the lister
	Update(obj *corev1.Node) error
	// Delete deletes the given object from lister
	Delete(obj *corev1.Node) error
}

// nodeLister implements the NodeLister interface.
type nodeLister struct {
	index cache.Indexer
	v1.NodeLister
}

// NewNodeLister returns a new NodeLister.
func NewFakeNodeLister() FakeNodeLister {
	indexers := v1.NewNodeDefaultIndexer()
	index := cache.NewIndexer(cache.DeletionHandlingMetaNamespaceKeyFunc, indexers)
	lister := v1.NewNodeLister(index)
	return &nodeLister{
		index:      index,
		NodeLister: lister,
	}
}

// Add adds the given object to the lister
func (s *nodeLister) Add(obj ...*corev1.Node) error {
	for _, curr := range obj {
		if err := s.index.Add(curr); err != nil {
			return err
		}
	}
	return nil
}

// Update updates the given object in the lister
func (s *nodeLister) Update(obj *corev1.Node) error {
	return s.index.Update(obj)
}

// Delete deletes the given object from lister
func (s *nodeLister) Delete(obj *corev1.Node) error {
	return s.index.Delete(obj)
}
