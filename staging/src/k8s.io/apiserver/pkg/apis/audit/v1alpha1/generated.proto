/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.apiserver.pkg.apis.audit.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";
import "k8s.io/apiserver/pkg/apis/example/v1/generated.proto";
import "k8s.io/kubernetes/pkg/api/v1/generated.proto";
import "k8s.io/kubernetes/pkg/apis/authentication/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// Event captures all the information that can be included in an API audit log.
message Event {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // AuditLevel at which event was generated
  optional string level = 2;

  // Time the request reached the apiserver.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time timestamp = 3;

  // Unique audit ID, generated for each request.
  // +optional
  optional string auditID = 4;

  // RequestURI is the request URI as sent by the client to a server.
  optional string requestURI = 5;

  // Verb is the kubernetes verb associated with the request.
  // For non-resource requests, this is identical to HttpMethod.
  optional string verb = 6;

  // Authenticated user information.
  optional k8s.io.kubernetes.pkg.apis.authentication.v1.UserInfo user = 7;

  // Impersonated user information.
  // +optional
  optional k8s.io.kubernetes.pkg.apis.authentication.v1.UserInfo impersonate = 8;

  // Source IP, from where the request originates.
  // +optional
  optional string sourceIP = 9;

  // Object reference this request is targeted at.
  // Does not apply for List-type requests, or non-resource requests.
  // +optional
  optional k8s.io.kubernetes.pkg.api.v1.ObjectReference objectRef = 10;

  // The response status, populated even when the ResponseObject is not a Status type.
  // For successful responses, this will only include the Code and StatusSuccess.
  // For non-status type error responses, this will be auto-populated with the error Message.
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Status responseStatus = 11;

  // API object from the request. The RequestObject is recorded as-is in the request, prior to
  // version conversion, defaulting, admission or merging. It is an external versioned object type,
  // and may not be a valid object on its own.  Omitted for non-resource requests.  Only logged at
  // RequestObject Level and higher.
  // +optional
  optional k8s.io.apimachinery.pkg.runtime.RawExtension requestObject = 12;

  // API object returned in the response. The ResponseObject is recorded after conversion to the
  // external type.  Omitted for non-resource requests.  Only logged at ResponseObject Level and
  // higher.
  // +optional
  optional k8s.io.apimachinery.pkg.runtime.RawExtension responseObject = 13;
}

// EventList is a list of audit Events.
message EventList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated Event events = 2;
}

// GroupKinds represents resource kinds in an API group.
message GroupKinds {
  // Group is the name of the API group that contains the resources.
  // The empty string represents the core API group.
  // +optional
  optional string group = 1;

  // Kinds is a list of kinds of resources within the API group.
  // Any empty list implies every resource kind in the API group.
  // +optional
  repeated string kinds = 2;
}

// Policy defines the configuration of audit logging, and the rules for how different request
// categories are logged.
message Policy {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Rules specify the audit Level a request should be recorded at.
  // A request may match multiple rules, in which case the FIRST matching rule is used.
  // The default audit level is None, but can be overridden by a catch-all rule at the end of the list.
  repeated PolicyRule rules = 2;
}

// PolicyRule maps requests based off metadata to an audit Level.
// Requests must match the rules of every field (an intersection of rules).
message PolicyRule {
  // The Level that requests matching this rule are recorded at.
  optional string level = 1;

  // The users (by authenticated user name) this rule applies to.
  // An empty list implies every user.
  // +optional
  repeated string users = 2;

  // The user groups this rule applies to. If a user is considered matching
  // if the are a member of any of these groups
  // An empty list implies every user group.
  // +optional
  repeated string userGroups = 3;

  // The verbs that match this rule.
  // An empty list implies every verb.
  // +optional
  repeated string verbs = 4;

  // Resource kinds that this rule matches. An empty list implies all kinds in all API groups.
  // +optional
  repeated GroupKinds resourceKinds = 5;

  // Namespaces that this rule matches.
  // The empty string "" matches non-namespaced resources.
  // An empty list implies every namespace.
  // +optional
  repeated string namespaces = 6;

  // NonResourceURLs is a set of URL paths that should be audited.
  // *s are allowed, but only as the full, final step in the path.
  // Examples:
  //  "/metrics" - Log requests for apiserver metrics
  //  "/healthz*" - Log all health checks
  // +optional
  repeated string nonResourceURLs = 7;
}

