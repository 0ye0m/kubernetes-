// Code generated by go-bindata.
// sources:
// pkg/apis/node/crd/runtimeclass_crd.yaml
// DO NOT EDIT!

package crd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgApisNodeCrdRuntimeclass_crdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x51\xc1\x6e\xd4\x30\x10\xbd\xe7\x2b\xe6\x80\xd4\xdd\x4a\x09\xac\xb8\x80\x2f\x55\xb5\x1c\x80\x03\xac\x5a\xd4\x4b\x01\x69\x88\x87\xac\x55\xc7\xb6\x66\xc6\x11\xf0\xf5\xc8\x59\x87\x4d\xab\x8a\x39\x25\xef\xcd\x7b\x7e\x7e\x7e\x70\xc1\x1a\xd8\x67\xd1\x38\xde\x90\xc4\xcc\x3d\xbd\xa3\x9f\x2e\x38\x75\x31\x34\x98\xdc\x1d\xb1\xb8\x18\x0c\x60\x72\xf4\x4b\x29\x94\x3f\xe9\x1e\xde\x48\xe7\xe2\xcb\x69\xf7\x83\x14\x77\xcd\x48\x8a\x16\x15\x4d\x03\x10\x70\x24\x03\x9c\x83\xba\x91\x7a\x8f\x22\x24\x5d\x88\x96\xaa\xa8\x91\x44\x7d\x59\x1c\x38\xe6\x64\x60\x4d\x01\x4c\xcb\x79\xd3\x0e\x7d\x3a\xe2\xee\x8c\x49\x11\x01\xb4\xf5\x84\xd5\x42\x19\x21\x9e\xc8\x1a\x50\xce\xb4\x40\x1a\x19\x07\xfa\x87\x15\x5d\x35\x49\x3e\x33\x7a\x03\xf0\x24\xe8\x4c\x8a\x0b\x43\xf6\xc8\x8f\x6f\x31\x53\xa7\xc2\xca\xdc\x9c\xa8\x7d\xa5\xd0\xda\xb9\x33\xf4\x07\x76\x41\x89\xf7\xd1\xe7\xf1\x94\x79\x49\x5c\x25\xed\x7b\x0c\xd6\x13\xcf\x86\xfa\x3b\x91\x01\x51\x76\x61\x98\x81\x8f\xb7\x9f\x3f\x1d\x50\x8f\x06\xba\x52\x54\x57\x23\x9c\x35\x8b\xdb\xf5\x40\x2b\x07\x8b\x4a\x4f\xf5\xcb\xab\x74\x3d\x13\x96\x70\x5f\xdc\x48\xa2\x38\xa6\x06\x40\xfa\x58\x74\x7b\x9f\x45\x67\xdf\x09\xbd\xb3\xf3\xda\xa9\xa2\x98\x28\x5c\x1f\x3e\xdc\xbd\xbe\xed\x8f\x34\xa2\xa9\xa5\x26\x8e\x89\x58\xdd\xd2\xe4\x5c\x58\x7d\xd1\x65\x9e\xdb\x81\x73\xd7\xf5\x2e\x8f\xb9\x67\xaa\x58\x19\xa2\x2a\x71\x30\x70\xf1\x7d\x73\x8f\xed\x9f\x57\xed\xdb\x6f\x9b\xfb\xb6\x7e\x5d\x2e\xd0\xf6\x6a\xf3\xb5\xfb\x2f\xbf\xbd\xdc\x5e\xbd\xb8\x68\xfe\x06\x00\x00\xff\xff\x14\x1e\x1c\xe4\xf8\x02\x00\x00")

func pkgApisNodeCrdRuntimeclass_crdYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgApisNodeCrdRuntimeclass_crdYaml,
		"pkg/apis/node/crd/runtimeclass_crd.yaml",
	)
}

func pkgApisNodeCrdRuntimeclass_crdYaml() (*asset, error) {
	bytes, err := pkgApisNodeCrdRuntimeclass_crdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/apis/node/crd/runtimeclass_crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/apis/node/crd/runtimeclass_crd.yaml": pkgApisNodeCrdRuntimeclass_crdYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": {nil, map[string]*bintree{
		"apis": {nil, map[string]*bintree{
			"node": {nil, map[string]*bintree{
				"crd": {nil, map[string]*bintree{
					"runtimeclass_crd.yaml": {pkgApisNodeCrdRuntimeclass_crdYaml, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
