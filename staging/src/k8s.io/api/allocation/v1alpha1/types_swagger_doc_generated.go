/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-generated-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE. DO NOT EDIT.
var map_ServiceIP = map[string]string{
	"": "ServiceIP represents an IP used by Kubernetes Service and is associated to a ServiceIPRange. The name of the object is the canonical IP address text representation. xref: https://datatracker.ietf.org/doc/html/rfc5952",
}

func (ServiceIP) SwaggerDoc() map[string]string {
	return map_ServiceIP
}

var map_ServiceIPList = map[string]string{
	"": "ServiceIPList contains a list of ServiceIP.",
}

func (ServiceIPList) SwaggerDoc() map[string]string {
	return map_ServiceIPList
}

var map_ServiceIPRange = map[string]string{
	"": "ServiceIPRange defines a range of IPs using CIDR format (192.168.0.0/24 or 2001:db2::0/64).",
}

func (ServiceIPRange) SwaggerDoc() map[string]string {
	return map_ServiceIPRange
}

var map_ServiceIPRangeList = map[string]string{
	"": "ServiceIPRangeList contains a list of ServiceIPRange objects.",
}

func (ServiceIPRangeList) SwaggerDoc() map[string]string {
	return map_ServiceIPRangeList
}

var map_ServiceIPRangeRef = map[string]string{
	"":         "ServiceIPRangeRef contains information that points to the ServiceIPRange being used so we can validate it",
	"apiGroup": "APIGroup is the group for the resource being referenced",
	"kind":     "Kind is the type of resource being referenced",
	"name":     "Name is the name of resource being referenced",
}

func (ServiceIPRangeRef) SwaggerDoc() map[string]string {
	return map_ServiceIPRangeRef
}

var map_ServiceIPRangeSpec = map[string]string{
	"":        "ServiceIPRangeSpec describe how the ServiceIPRange's specification looks like.",
	"range":   "Range of IPs in CIDR format (192.168.0.0/24 or 2001:db2::0/64).",
	"primary": "Primary indicates if this is the primary allocator to be used by the apiserver to allocate IP addresses. NOTE this can simplify the Service strategy logic so we don't have to infer the primary allocator, it also may allow to switch between primary families in a cluster, but this looks like a loooong shot.",
}

func (ServiceIPRangeSpec) SwaggerDoc() map[string]string {
	return map_ServiceIPRangeSpec
}

var map_ServiceIPRangeStatus = map[string]string{
	"":        "ServiceIPRangeStatus defines the observed state of ServiceIPRange.",
	"ready":   "Ready indicates if the ServiceIPRange is ready to serve IPs",
	"message": "Message A human readable message indicating details about why the ServiceIPRange is in this condition.",
}

func (ServiceIPRangeStatus) SwaggerDoc() map[string]string {
	return map_ServiceIPRangeStatus
}

var map_ServiceIPSpec = map[string]string{
	"":                  "ServiceIPSpec describe the attributes in an IP Address,",
	"serviceIPRangeRef": "ServiceIPRangeRef references the ServiceIPRange associated to this IP Address. All IP addresses has to be associated to one ServiceIPRange allocator.",
}

func (ServiceIPSpec) SwaggerDoc() map[string]string {
	return map_ServiceIPSpec
}

// AUTO-GENERATED FUNCTIONS END HERE
