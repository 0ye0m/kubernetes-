/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package k8s.io.api.allocation.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// ServiceIP represents an IP used by Kubernetes Service and is associated to a ServiceIPRange.
// The name of the object is the canonical IP address text representation.
// xref: https://datatracker.ietf.org/doc/html/rfc5952
message ServiceIP {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional ServiceIPSpec spec = 2;
}

// ServiceIPList contains a list of ServiceIP.
message ServiceIPList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ServiceIP items = 2;
}

// ServiceIPRange defines a range of IPs using CIDR format (192.168.0.0/24 or 2001:db2::0/64).
message ServiceIPRange {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // +optional
  optional ServiceIPRangeSpec spec = 2;

  // +optional
  optional ServiceIPRangeStatus status = 3;
}

// ServiceIPRangeList contains a list of ServiceIPRange objects.
message ServiceIPRangeList {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated ServiceIPRange items = 2;
}

// ServiceIPRangeRef contains information that points to the ServiceIPRange being used so we can validate it
message ServiceIPRangeRef {
  // APIGroup is the group for the resource being referenced
  optional string apiGroup = 1;

  // Kind is the type of resource being referenced
  optional string kind = 2;

  // Name is the name of resource being referenced
  optional string name = 3;
}

// ServiceIPRangeSpec describe how the ServiceIPRange's specification looks like.
message ServiceIPRangeSpec {
  // Range of IPs in CIDR format (192.168.0.0/24 or 2001:db2::0/64).
  optional string range = 1;

  // Primary indicates if this is the primary allocator to be used by the
  // apiserver to allocate IP addresses.
  // NOTE this can simplify the Service strategy logic so we don't have to infer
  // the primary allocator, it also may allow to switch between primary families in
  // a cluster, but this looks like a loooong shot.
  // +optional
  optional bool primary = 2;
}

// ServiceIPRangeStatus defines the observed state of ServiceIPRange.
message ServiceIPRangeStatus {
  // Ready indicates if the ServiceIPRange is ready to serve IPs
  // +optional
  optional bool ready = 1;

  // Message A human readable message indicating details about why the ServiceIPRange is in this condition.
  optional string message = 2;
}

// ServiceIPSpec describe the attributes in an IP Address,
message ServiceIPSpec {
  // ServiceIPRangeRef references the ServiceIPRange associated to this IP Address.
  // All IP addresses has to be associated to one ServiceIPRange allocator.
  optional ServiceIPRangeRef serviceIPRangeRef = 1;
}

